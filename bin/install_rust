#!/bin/bash -eu

function __install_rust_build_essentials {
  apt+ install build-essentials
}

function __install_rust_install_dependencies {
  apt+ install openssl openssl-devel sqlite3 sqlite3-devel
}

function __install_rust_activator() {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)
  local activator="${1}"

  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

source "${HOME}"/.cargo/env
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}    

function install_rust_binaries {
  local toolchain=${1:-stable}
  local profile=${2:-minimal}
  local tools=${TOOLS_HOME:=$HOME/tools}
  [[ ! -d $tools ]] && mkdir -p $tools
  [[ ! -d $tools/cargo ]] && mkdir -p $tools/cargo
  [[ ! -L ~/.cargo ]] && ln -s $tools/cargo ~/.cargo

  curl https://sh.rustup.rs -sSf | sh -s -- --profile ${profile} --default-toolchain ${toolchain} --no-modify-path -y \
    && source "${HOME}"/.cargo/env && hash -r \
        && rustup component add --toolchain ${toolchain} clippy rustfmt \
        && rustup component add --toolchain ${toolchain} rust-src \
        && [[ -e $(which gcc) ]] || __install_rust_build_essentials
}

function __install_rust_addons {
cat << EOD
cargo-watch
cargo-edit
cargo-generate
cargo-udeps
cargo-whatfeatures
cargo-docset
cargo-tarpaulin
cargo-audit --features=fix
cargo-deny
cargo-make
cargo-xtask
cargo-about
evcxr_repl
mdbook
mdbook-linkcheck
EOD
}

function install_rust_addons {
  local toolchain=${1:-stable}
  source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
    && __install_rust_install_dependencies \
      && __install_rust_addons | grep -v -E '^#' | while read line ;do cargo install --force ${line} ;done
}

function __install_rust_web_addons {
cat <<EOD
cargo-wasi
cargo-web
basic-http-server
wasm-bindgen-cli
wasm-pack
EOD
}

function install_rust_web {
  local toolchain=${1:-stable}
  source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
    && rustup target add --toolchain ${toolchain} wasm32-wasi wasm32-unknown-emscripten wasm32-unknown-unknown \
      && __install_rust_web_addons | grep -v -E '^#' | while read line ;do cargo install --force ${line} ;done
}

function __install_rust_android_addons {
cat <<EOD
cargo-ndk
EOD
}

function install_rust_android {
  local toolchain=${1:-stable}
  source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
    && rustup target add --toolchain ${toolchain} aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android \
      && __install_rust_android_addons | grep -v -E '^#' | while read line ;do cargo install --force ${line} ;done
}

function __install_rust_ios_addons {
cat <<EOD
cargo-lipo
EOD
}

function install_rust_ios {
  local toolchain=${1:-stable}
  local mode=${2:-current}
  if [[ "${mode}" == "legacy" ]] ;then
    source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
      && rustup target add --toolchain ${toolchain} aarch64-apple-ios x86_64-apple-ios armv7-apple-ios i386-apple-ios \
        && __install_rust_ios_addons | grep -v -E '^#' | while read line ;do cargo install --force ${line} ;done
  else
    source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
      && rustup target add --toolchain ${toolchain} aarch64-apple-ios x86_64-apple-ios \
        && __install_rust_ios_addons | grep -v -E '^#' | while read line ;do cargo install --force ${line} ;done
  fi
}

function install_rust_lsp_wasm {
  local toolchain=${1:-stable}

  [[ -d "${WORKSPACE}" ]] || mkdir -p "${WORKSPACE}"
  if [ ! -d "${WORKSPACE}/wasm-lsp-server" ] ;then
      git clone --recursive http://github.com/wasm-lsp/wasm-lsp-server "${WORKSPACE}/wasm-lsp-server"
  else
      git -C "${WORKSPACE}/wasm-lsp-server" pull
  fi

  pushd "${WORKSPACE}/wasm-lsp-server"
  cargo +${toolchain} xtask init
  cargo +${toolchain} xtask install
  popd
}

function install_rust_lsp {
  local toolchain=${1:-stable}
  source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
    && rustup component add --toolchain ${toolchain} rls rust-analysis rust-src
}

function install_rust_lsp_texlab {
  local toolchain=${1:-stable}
  source "${HOME}"/.cargo/env && hash -r && rustup update ${toolchain} \
    && cargo install --force --git https://github.com/latex-lsp/texlab.git
}

function install_rust_experimental {
  local toolchain=${1:-stable}
  install_rust_lsp_wasm ${toolchain}
}

function __install_rust {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)
  
  local option="${1:-help}"
  local toolchain="${2:-stable}"
  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/400-rust.sh



  case "${option}" in
    "minimal")  install_rust_binaries   ${toolchain} minimal    ; __install_rust_activator "${config}";;
    "complete") install_rust_binaries   ${toolchain} complete   ; __install_rust_activator "${config}";;
    "addons")	install_rust_addons 	${toolchain}            ; __install_rust_activator "${config}";;
    "web")	install_rust_web	${toolchain}            ; __install_rust_activator "${config}";  ${dir}/install_wabt;;
    "android")	install_rust_android	${toolchain}            ; __install_rust_activator "${config}";;
    "ios")	version=$(rustup ${toolchain} --version 2>&1 | tail -1 | sed -E 's/^.*`rustc ([0-9.]+) .*$/\1/')
                if [[ "1.52.1" > "1.41.0" ]] ;then
                    install_rust_ios	${toolchain}
                else
                    install_rust_ios    ${toolchain} legacy
                fi
                __install_rust_activator "${config}" ;;
    "lsp")	install_rust_lsp	${toolchain}            ; __install_rust_activator "${config}";;
    "texlab")	install_rust_lsp_texlab	${toolchain}            ; __install_rust_activator "${config}";;
    "all")
        install_rust_binaries ${toolchain} minimal
        install_rust_addons   ${toolchain} 
        install_rust_web      ${toolchain} 
        install_rust_android  ${toolchain} 
	install_rust_ios      ${toolchain} 
        install_rust_lsp      ${toolchain} 
        __install_rust_activator "${config}" ;;
    "experimental") install_rust_experimental ;;
    *) echo 'Usage install_rust command [nightly]'
       echo 'Installs Rust compiler, Cargo package manager and additional tools and packages'
       echo ''
       echo 'Commands:'
       echo '  minimal         installs Rust and a minimal set of tools'
       echo '  complete        installs Rust and a complete set of tools'
       echo '  addons          installs an oppinionated set of useful Cargo plugins'
       echo '  web             installs an oppinionated set of tools for web development'
       echo '  android         installs an oppinionated set of tools for Android development'
       echo '  ios             installs an oppinionated set of tools for iOS development'
       echo '  lsp             installs Rust support for Language Server Protocol'
       echo '  texlab          installs experimental support for LaTeX (and thousands of textlive packages)'
       echo '  experimental    installs experimental tools and packages'
       echo '  all             installs all tools and packages, except experimental packages'
       ;;
  esac
}
 

if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi

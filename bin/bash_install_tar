#!/bin/bash -eu

function __bash_install_tar_help(){
  echo "Usage: bash_install_tar URL FILE FOLDER [SYMLINKS [BIN [SUBFOLDER]]] -- [TAR-OPTIONS] ..."
  echo "Downloads URL, save onto FILE, tar extract into FOLDER, creates SYMLINKS under BIN to SUBFOLDER."
}

function __bash_install_tar_worker() {
  set -x
  which curl >/dev/null 2>&1 || apt+ install curl

  [[ $# -lt 3 ]] && __bash_install_tar_help && return 1
  local url="$1"
  local file="$2"
  local folder="$3"
  shift; shift; shift;
  local symlinks=
  local bin=
  local subfolder=
  local options=
  [[ $# -gt 0 && "${1}" != "--" ]] && local symlinks="$1" && shift
  [[ $# -gt 0 && "${1}" != "--" ]] && local bin="$1" && shift
  [[ $# -gt 0 && "${1}" != "--" ]] && local subfolder="$1" && shift
  local bin="${bin:-${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin}"

  [[ $# -gt 0 && "${1}" == "--" ]] && shift && local options="${@}"

  local tools="${TOOLS_HOME:=$HOME/tools}"
  local Software="${SOFTWARE:=/mnt/omv/Software}"

  [[ ! -d "${DOWNLOADS}" ]] && mkdir -p "${DOWNLOADS}"
  [[ ! -d "${tools}" ]] && mkdir -p "${tools}"

  local archive=""
  if [[ -f "${Software}/Linux/${file}" ]]; then
    local archive="${Software}/Linux/${file}"
  elif [[ -f "${DOWNLOADS}/${file}" ]]; then
    local archive="${DOWNLOADS}/${file}"
  fi

  which xz >/dev/null 2>&1 || apt+ install xz

  # validate existing archive
  [[ ! -s "${archive}" ]] && [[ ! $(tar -tf "${archive}" > /dev/null 2>&1) ]] && rm "${archive}" && local archive=""

  # download archive
  if [[ -z "${archive}" ]]; then
    local archive="${DOWNLOADS}/${file}"
    local header="/tmp/bash_install_tar_$$"
    curl -sSL -I "${url}" -o "${header}"
    local status=$(cat "${header}" | tr -d '\r' | grep -E "^HTTP/[12]" | tail -1 | cut -d' ' -f2)
    if [[ "${status}" =~ 200 ]] ;then
      curl -sSL "${url}" -o "${archive}"
    else
      echo "ERROR: remote resource could not be found: ${url}"
      return 1
    fi
  fi

  # apply relative folder to base path if necessary
  [[ "${folder:0:1}" != "/" ]] && local folder="${tools}/${folder}"

  [[ -d "${folder}" ]] || mkdir -p "${folder}" && \
    [[ ! -z "${archive}" ]] && tar -C "${folder}" "${options}" -xpf "${archive}" > /dev/null 2>&1 && \
      local symlinks=$(echo "${symlinks}" | tr -d '(' | tr -d ')') && \
      if [[ ! -z "${symlinks}" ]] ;then
        echo "${symlinks}" | tr ',' '\n' | \
          while read symlink ;do
            local source=$(echo "${symlink}" | cut -d: -f1)
            local target=$(echo "${symlink}" | cut -d: -f2)
            local target=${target:=${source}}
            [[ ! -L "${bin}/${symlink}" ]] || rm "${bin}/${symlink}" && \
              ln -s "${folder}/${subfolder}/${source}" "${bin}/${target}" && echo "${bin}/${target}"
          done
      else
          return 0
      fi
}

function __bash_install_tar_logger() (
  set -x
  __bash_install_tar_worker $@ 2> ${log}
)

function __bash_install_tar() {
  local log=$(mktemp -t bash_install_tar.XXX.log)
  echo "INFO: See installation log at: ${log}"
  set +e
  __bash_install_tar_logger $@ 2> ${log}
  local errno=$?
  set -e
  [[ ${errno} -eq 0 ]] || echo "ERROR: errno=${errno} :: installation failed."
  return ${errno}
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  self=$(readlink -f "${BASH_SOURCE[0]}")
  dir=$(dirname $self)
  grep -E "^function __" $self | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  self=$(readlink -f "${BASH_SOURCE[0]}")
  dir=$(dirname $self)
  cmd=$(grep -E "^function __" $self | cut -d' ' -f2  | sed 's/()//' | tail -1)
  $cmd $*
fi

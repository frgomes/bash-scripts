#!/bin/bash -eu

function __bash_install_app_help(){
  echo "Usage: bash_install_app URL FILE FOLDER [SYMLINKS [BIN [SUBFOLDER]]]"
  echo "Downloads URL, save onto FILE, copy into FOLDER, creates SYMLINKS under BIN to SUBFOLDER."
}

function __bash_install_app_worker() {
  which curl >/dev/null 2>&1 || apt+ install curl

  [[ $# -lt 3 ]] && __bash_install_app_help && return 1
  local url="$1"
  local file="$2"
  local folder="$3"
  shift; shift; shift;
  local symlinks=
  local bin=
  local subfolder=
  [[ $# -gt 0 ]] && local symlinks="$1" && shift
  [[ $# -gt 0 ]] && local bin="$1" && shift
  [[ $# -gt 0 ]] && local subfolder="$1" && shift
  local bin="${bin:-${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin}"

  local tools="${TOOLS_HOME:=$HOME/tools}"
  local Software="${SOFTWARE:=/mnt/omv/Software}"

  [[ ! -d "${DOWNLOADS}" ]] && mkdir -p "${DOWNLOADS}"
  [[ ! -d "${tools}" ]] && mkdir -p "${tools}"

  local archive=""
  if [[ -f "${Software}/Linux/${file}" ]]; then
    local archive="${Software}/Linux/${file}"
  elif [[ -f "${DOWNLOADS}/${file}" ]]; then
    local archive="${DOWNLOADS}/${file}"
  fi

  # validate existing archive
  [[ ! -s "${archive}" ]] && [[ ! -s "${archive}" ]] && rm "${archive}" && local archive=""

  # download archive
  if [[ -z "${archive}" ]]; then
    local archive="${DOWNLOADS}/${file}"
    curl -sSL "$url" -o "${archive}"
  fi

  # apply relative folder to base path if necessary
  [[ "${folder:0:1}" != "/" ]] && local folder="${tools}/${folder}"
  
  [[ -d "${folder}" ]] || mkdir -p "${folder}" && \
    [[ -s "${archive}" ]] && cp "${archive}" "${folder}/${file}" && \
      chmod ugo+x "${folder}/${file}" && \
      local symlinks=$(echo "${symlinks}" | tr -d '()') && \
        if [[ ! -z "${symlinks}" ]] ;then
          echo "${symlinks}" | tr ',' '\n' | head -1 | \
            while read symlink ;do
              local source=$(echo "${symlink}" | cut -d: -f1)
              local target=$(echo "${symlink}" | cut -d: -f2)
              local target=${target:=${source}}
              [[ ! -L "${bin}/${symlink}" ]] || rm "${bin}/${symlink}" && \
                ln -s "${folder}/${subfolder}/${source}" "${bin}/${target}" && echo "${bin}/${target}"
            done
        else
            return 0
        fi
}

function __bash_install_app_logger() (
  set -x
  __bash_install_app_worker $@ 2> ${log}
)    

function __bash_install_app() {
  local log=$(mktemp -t bash_install_app.XXX.log)
  echo "INFO: See installation log at: ${log}"
  set +e
  __bash_install_app_logger $@ 2> ${log}
  local errno=$?
  set -e
  [[ ${errno} -eq 0 ]] || echo "ERROR: errno=${errno} :: installation failed."
  return ${errno}  
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  self=$(readlink -f "${BASH_SOURCE[0]}")
  dir=$(dirname $self)
  grep -E "^function __" $self | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  self=$(readlink -f "${BASH_SOURCE[0]}")
  dir=$(dirname $self)
  cmd=$(grep -E "^function __" $self | cut -d' ' -f2  | sed 's/()//' | tail -1)
  $cmd $*
fi

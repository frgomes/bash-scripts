#!/bin/bash -eu

function install_doctl {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  local name=doctl
  group=250
  local releases=https://github.com/digitalocean/doctl/releases
  local latest=${releases}/latest
  local latest="$(curl -I ${latest} 2>/dev/null | fgrep location: | tr -d '[:cntrl:]' | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')"
  echo "${name}: latest version: ${latest:-(not detected)}" 1>&2
  local default="${DOCTL_VERSION:-${latest:-1.70.0}}"
  local version="${1:-${default}}"
  echo "${name}: installing version: ${version}" 1>&2

  local hwarch=$(uname -m | tr '[:upper:]' '[:lower:]')
  local osarch=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "${hwarch}" in
      x86_64) hwarch=amd64 ;;
      i386) hwarch=386 ;;
      aarch64) hwarch=arm64 ;;
      *) echo "ERROR: hardware platform is not supported: ${hwarch}" ; return 1 ;;
  esac
  case "${osarch}" in
      linux) ;;
      darwin) ;;
      *) echo "ERROR: software platform is not supported: ${osarch}" ; return 1 ;;
  esac
  local arch=${osarch}-${hwarch}

  local file=${name}-${version}-${arch}.tar.gz
  local url=${releases}/download/v${version}/${file}
  local folder=${name}-${version}
  local subfolder=.
  local symlinks=${name}
  local bin="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin"

  "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "(${symlinks})" "${bin}" "${subfolder}"

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/${group}-${name}.sh
  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export DOCTL_VERSION=${version}
export DOCTL_HOME=\${TOOLS_HOME:=\$HOME/tools}/${folder}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}

function __install_doctl {
  self=$(readlink -f "${BASH_SOURCE[0]}"); dir=$(dirname $self)
  grep -E "^function [a-zA-Z0-9]" $self | cut -d' ' -f2 | while read cmd ;do
    $cmd $*
  done
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi

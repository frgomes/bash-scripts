#!/bin/bash -eu

function install_node_binaries {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  which curl >/dev/null 2>&1 || apt+ install curl
  which jq >/dev/null 2>&1 || apt+ install jq

  local name=node
  local group=341
  local latest=https://nodejs.org/download/release/index.json
  local latest="$(curl ${latest} 2>/dev/null | jq .[0].version | tr -d '"' | sed -E 's|v(.*)$|\1|')"
  echo "${name}: latest version: ${latest:-(not detected)}" 1>&2
  local default="${NODE_VERSION:-${latest:-16.11.1}}"
  local version="${1:-${default}}"
  echo "${name}: installing version: ${version}" 1>&2

  local hwarch=$(uname -m | tr '[:upper:]' '[:lower:]')
  local osarch=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "${hwarch}" in
      x86_64) hwarch=x64 ;;
      i386) hwarch=i386 ;;
      *) echo "ERROR: hardware platform is not supported: ${hwarch}" ; return 1 ;;
  esac
  case "${osarch}" in
      linux) ;;
      darwin) ;;
      *) echo "ERROR: software platform is not supported: ${osarch}" ; return 1 ;;
  esac
  local arch=${osarch}-${hwarch}

  local file=node-v${version}-${arch}.tar.xz
  local url=http://nodejs.org/download/release/v${version}/${file}
  local folder=${name}-${version}-${arch}
  local subfolder=bin
  local symlinks=node,npm,npx
  local bin="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin"

  "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "(${symlinks})" "${bin}" "${subfolder}" "--" "--strip-components=1"

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/${group}-${name}.sh
  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export NODE_VERSION=${version}
export NODE_ARCH=\${NODE_ARCH:-${arch}}
export NODE_HOME=\${TOOLS_HOME:=\${HOME}/tools}/node-\${NODE_VERSION}-\${NODE_ARCH}

export PATH=\${NODE_HOME}/bin:\${PATH}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}

function install_node_tools {
  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/341-node.sh
  source ${config}
  npm install -g npm@latest
  npm install -g rollup
  npm install -g yarn
  npm install -g ibm-openapi-validator
  npm install -g @openapitools/openapi-generator-cli
  npm install -g webpack style-loader css-loader
  npm install -g typescript tslint ts-node-dev
}

function install_node_react {
  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/341-node.sh
  source ${config}
  npm install -g react-native-cli
  npm install -g react-native-vector-icons
}

function install_node_ls {
  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/341-node.sh
  source ${config}
  npm ls -g --depth=0
}    

function __install_node {
  local self=$(readlink -f "${BASH_SOURCE[0]}"); dir=$(dirname $self)
  grep -E "^function [a-zA-Z0-9]" $self | cut -d' ' -f2 | while read cmd ;do
    $cmd $*
  done
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi

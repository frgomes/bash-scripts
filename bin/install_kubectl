#!/bin/bash -eu

# see: https://kubernetes.io/docs/tasks/tools/install-kubectl/
function install_kubectl {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  local name=kubectl
  local group=250
  local releases=https://storage.googleapis.com/kubernetes-release/release
  local latest=${releases}/stable.txt
  local latest="$(curl ${latest} 2>/dev/null | sed -E 's|v(.*)$|\1|')"
  echo "${name}: latest version: ${latest:-(not detected)}" 1>&2
  local default="${KUBECTL_VERSION:-${latest:-1.23.4}}"
  local version="${1:-${default}}"
  echo "${name}: installing version: ${version}" 1>&2

  local hwarch=$(uname -m | tr '[:upper:]' '[:lower:]')
  local osarch=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "${hwarch}" in
      x86_64) hwarch=amd64 ;;
      armv7l) hwarch=arm ;;
      aarch64) hwarch=arm64 ;;
      *) echo "ERROR: hardware platform is not supported: ${hwarch}" ; return 1 ;;
  esac
  case "${osarch}" in
      linux) ;;
      darwin) ;;
      *) echo "ERROR: software platform is not supported: ${osarch}" ; return 1 ;;
  esac
  local arch=${osarch}/${hwarch}

  local file=${name}
  local url=${releases}/v${version}/bin/${osarch}/${hwarch}/${file}
  local folder=${name}-${version}
  local subfolder=.
  local symlinks=${name}
  local bin="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin"

  "${dir}"/bash_install_app "${url}" "${file}" "${folder}" "(${symlinks})" "${bin}" "${subfolder}"

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/${group}-${name}.sh
  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export KUBECTL_VERSION=${version}
export KUBECTL_HOME=\${TOOLS_HOME:=\$HOME/tools}/${folder}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}


function install_kubectl_stash {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  which curl >/dev/null 2>&1 || apt+ install curl

  local name=kubectl-stash
  local group=250
  local releases=https://github.com/stashed/cli/releases
  local latest=${releases}/latest
  local latest="$(curl -I ${latest} 2>/dev/null | fgrep location: | tr -d '[:cntrl:]' | cut -d' ' -f2 | sed -E 's|.*\/v(.*)|\1|')"
  echo "${name}: latest version: ${latest:-(not detected)}" 1>&2
  local default="${KUBECTL_STASH_VERSION:-${latest:-0.18.0}}"
  local version="${1:-${default}}"
  echo "${name}: installing version: ${version}" 1>&2

  local hwarch=$(uname -m | tr '[:upper:]' '[:lower:]')
  case "${hwarch}" in
      x86_64) hwarch=amd64 ;;
      armv7l) hwarch=arm ;;
      aarch64) hwarch=arm64 ;;
      *) echo "ERROR: hardware platform is not supported: ${hwarch}" ; return 1 ;;
  esac
  local osarch=$(uname -s | tr '[:upper:]' '[:lower:]')
  case "${osarch}" in
      linux) arch=${osarch}-${hwarch} ;;
      darwin) arch=${osarch}-${hwarch} ;;
      *) echo "ERROR: software platform is not supported: ${osarch}" ; return 1 ;;
  esac

  local file=${name}-${osarch}-${hwarch}.tar.gz
  local url=https://github.com/stashed/cli/releases/download/v${version}/${file}
  local folder=${name}-${version}
  local subfolder=.
  local symlinks=${name}-${osarch}-${hwarch}
  local bin="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin"

  "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "(${symlinks})" "${bin}" "${subfolder}"

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/${group}-${name}.sh
  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export KUBECTL_STASH_VERSION=${version}
export KUBECTL_STASH_HOME=\${TOOLS_HOME:=\$HOME/tools}/${folder}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}

function __install_kubectl {
  self=$(readlink -f "${BASH_SOURCE[0]}"); dir=$(dirname $self)
  grep -E "^function [a-zA-Z0-9]" $self | cut -d' ' -f2 | while read cmd ;do
    $cmd $*
  done
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi

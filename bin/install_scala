#!/bin/bash -eu

function install_scala {
  local self=$(readlink -f "${BASH_SOURCE[0]}")
  local dir=$(dirname $self)

  which curl >/dev/null 2>&1 || apt+ install curl

  local version=${version:-"3.3"}
  local version=${1:-"${version}"}

  if [[ $version =~ ^2.12(\.[0-9]+)? ]] ;then
    local major=2.12
    local default=2.12.18
  elif [[ $version =~ ^2.13(\.[0-9]+)? ]] ;then
    local major=2.13
    local default=2.13.12
  elif [[ $version =~ ^3.0(\.[0-9]+)? ]] ;then
    local major=3.0
    local default=3.0.2
  elif [[ $version =~ ^3.1(\.[0-9]+)? ]] ;then
    local major=3.1
    local default=3.1.2
  elif [[ $version =~ ^3.2(\.[0-9]+)? ]] ;then
    local major=3.2
    local default=3.2.2
  elif [[ $version =~ ^3.3(\.[0-9]+)? ]] ;then
    local major=3.3
    local default=3.3.1
  else
    echo "ERROR: Unsupported Scala version ${version}"
    echo 'INFO: Supported JDK versions are: 2.12.*, 2.13.*, 3.0.*, 3.1.*, 3.2.*, 3.3.*'
    return 1
  fi

  if [[ "${version}" == "${major}" ]] ;then
    version=${default}
  fi

  local name=scala
  local group=320
  local releases=https://github.com/lampepfl/dotty/releases
  local latest=${releases}/latest
  local latest="$(curl -I ${latest} 2>/dev/null | fgrep location: | tr -d '[:cntrl:]' | cut -d' ' -f2 | sed -E 's|.*\/(.*)$|\1|')"
  echo "${name}: latest version: ${latest:-(not detected)}" 1>&2
  local version="${version:-${latest:-${default}}}"
  echo "${name}: installing version: ${version}" 1>&2

  if [[ $version =~ ^(3\.).* ]] ;then
    local file=scala3-${version}.tar.gz
    local url=${releases}/download/${version}/${file}
  else
    local file=scala-${version}.tgz
    local url=https://downloads.lightbend.com/scala/${version}/${file}
  fi

  local symlinks=
  local folder=${name}-${version}
  local subfolder=bin
  local bin="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}/bin"
  "${dir}"/bash_install_tar "${url}" "${file}" "${folder}" "(${symlinks})" "${bin}" "${subfolder}" "--" "--strip-components=1"

  local config="${VIRTUAL_ENV:-${HOME}/.local/share/bash-scripts}"/postactivate/postactivate.d/${group}-${name}.sh
  [[ ! -d $(dirname "${config}") ]] && mkdir -p $(dirname "${config}")
  cat <<EOD > "${config}"
#!/bin/bash

export SCALA_VERSION=${version}
export SCALA_HOME=\${TOOLS_HOME:=\$HOME/tools}/${folder}
export PATH=\${SCALA_HOME}/bin:\${PATH}
EOD
  chmod ugo+x "${config}"
  echo "${config}"
}

function __install_scala {
  self=$(readlink -f "${BASH_SOURCE[0]}"); dir=$(dirname $self)
  grep -E "^function [a-zA-Z0-9]" $self | cut -d' ' -f2 | while read cmd ;do
    $cmd $*
  done
}


if [ $_ != $0 ]; then
  # echo "Script is being sourced: list all functions"
  grep -E "^function [a-zA-Z0-9]" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2 | sed 's/()//'
else
  # echo "Script is a subshell: execute last function"
  $(grep -E "^function __" $(readlink -f "${BASH_SOURCE[0]}") | cut -d' ' -f2  | sed 's/()//' | tail -1) "$@"
fi
